using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using SabaFone.Backend.Data;
using SabaFone.Backend.Data.Vulnerabilities.Models;

namespace SabaFone.Backend.Services.Implementation
{
    public class VulnerabilityScannerService : BackgroundService
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly ILogger<VulnerabilityScannerService> _logger;
        private readonly IConfiguration _configuration;
        private readonly int _scanIntervalMinutes;
        private readonly bool _autoScanEnabled;

        public VulnerabilityScannerService(
            IServiceProvider serviceProvider,
            ILogger<VulnerabilityScannerService> logger,
            IConfiguration configuration)
        {
            _serviceProvider = serviceProvider;
            _logger = logger;
            _configuration = configuration;
            
            _autoScanEnabled = _configuration.GetValue<bool>("Vulnerability:AutoScanEnabled", true);
            _scanIntervalMinutes = _configuration.GetValue<int>("Vulnerability:ScanIntervalMinutes", 60);
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            _logger.LogInformation("Vulnerability Scanner Service started");

            if (!_autoScanEnabled)
            {
                _logger.LogInformation("Auto-scanning is disabled");
                return;
            }

            while (!stoppingToken.IsCancellationRequested)
            {
                try
                {
                    await PerformVulnerabilityScan();
                    await ProcessScanResults();
                    await CheckCriticalVulnerabilities();
                    
                    await Task.Delay(TimeSpan.FromMinutes(_scanIntervalMinutes), stoppingToken);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error in vulnerability scanner service");
                    await Task.Delay(TimeSpan.FromMinutes(5), stoppingToken);
                }
            }

            _logger.LogInformation("Vulnerability Scanner Service stopped");
        }

        private async Task PerformVulnerabilityScan()
        {
            try
            {
                using (var scope = _serviceProvider.CreateScope())
                {
                    var scanningService = scope.ServiceProvider.GetRequiredService<IScanningService>();
                    var context = scope.ServiceProvider.GetRequiredService<SsasDbContext>();
                    
                    _logger.LogInformation("Starting automated vulnerability scan");

                    // Get systems to scan
                    var targets = await GetScanTargets(context);
                    
                    if (targets.Any())
                    {
                        // Start scan
                        var scanId = await scanningService.StartScanAsync(
                            "Automated",
                            targets,
                            new Dictionary<string, object>
                            {
                                ["ScanType"] = "Full",
                                ["Priority"] = "Normal"
                            });

                        _logger.LogInformation($"Automated scan started with ID: {scanId}");
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error performing vulnerability scan");
            }
        }

        private async Task<List<string>> GetScanTargets(SsasDbContext context)
        {
            // In production, get actual targets from configuration or database
            var targets = new List<string>
            {
                "192.168.1.0/24",
                "webserver.sabafone.local",
                "database.sabafone.local"
            };

            return await Task.FromResult(targets);
        }

        private async Task ProcessScanResults()
        {
            try
            {
                using (var scope = _serviceProvider.CreateScope())
                {
                    var context = scope.ServiceProvider.GetRequiredService<SsasDbContext>();
                    var vulnerabilityService = scope.ServiceProvider.GetRequiredService<IVulnerabilityService>();
                    
                    // Get unprocessed scan results
                    // In production, fetch from actual scan results
                    
                    _logger.LogDebug("Processing scan results");
                    
                    // Simulate finding vulnerabilities
                    var random = new Random();
                    if (random.Next(100) < 30) // 30% chance of finding vulnerability
                    {
                        var vulnerability = new Vulnerability
                        {
                            VulnerabilityId = Guid.NewGuid(),
                            Title = $"Automated Scan Finding {DateTime.UtcNow.Ticks}",
                            Description = "Vulnerability found during automated scan",
                            Severity = random.Next(4) switch
                            {
                                0 => "Critical",
                                1 => "High",
                                2 => "Medium",
                                _ => "Low"
                            },
                            DiscoveredAt = DateTime.UtcNow,
                            DiscoveredBy = "Automated Scanner",
                            Status = "Open",
                            IsExploitable = random.Next(2) == 1,
                            CVSSScore = Math.Round(random.NextDouble() * 10, 1),
                            CreatedAt = DateTime.UtcNow
                        };

                        await vulnerabilityService.CreateVulnerabilityAsync(vulnerability);
                        
                        _logger.LogWarning($"New vulnerability discovered: {vulnerability.Title} (Severity: {vulnerability.Severity})");
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing scan results");
            }
        }

        private async Task CheckCriticalVulnerabilities()
        {
            try
            {
                using (var scope = _serviceProvider.CreateScope())
                {
                    var context = scope.ServiceProvider.GetRequiredService<SsasDbContext>();
                    var notificationService = scope.ServiceProvider.GetRequiredService<INotificationService>();
                    
                    // Check for critical vulnerabilities
                    var criticalVulns = await context.Vulnerabilities
                        .Where(v => v.Severity == "Critical" && 
                                   v.Status == "Open" &&
                                   v.NotificationSent != true)
                        .ToListAsync();

                    foreach (var vuln in criticalVulns)
                    {
                        await notificationService.SendCriticalVulnerabilityAlertAsync(vuln);
                        
                        vuln.NotificationSent = true;
                        
                        _logger.LogCritical($"Critical vulnerability alert sent: {vuln.Title}");
                    }

                    if (criticalVulns.Any())
                    {
                        await context.SaveChangesAsync();
                    }

                    // Check for overdue patches
                    var overduePatches = await context.Vulnerabilities
                        .Where(v => v.PatchDeadline != null && 
                                   v.PatchDeadline < DateTime.UtcNow &&
                                   v.Status != "Resolved")
                        .CountAsync();

                    if (overduePatches > 0)
                    {
                        await notificationService.SendRoleBasedNotificationAsync(
                            "SecurityOfficer",
                            "Overdue Patches",
                            $"There are {overduePatches} vulnerabilities with overdue patches");
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error checking critical vulnerabilities");
            }
        }

        public override async Task StopAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("Vulnerability Scanner Service is stopping");
            await base.StopAsync(cancellationToken);
        }
    }
}